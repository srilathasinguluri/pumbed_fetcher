To fetch PubMed data and extract the required fields into a CSV file, you can use Python with the Entrez module from Biopython.

ðŸ“Œ Steps to Implement
Fetch PubMed articles using a query (e.g., "cancer treatment").
Extract relevant details:
PubmedID (PMID)
Title
Publication Date
Non-academic Author(s) (Filtered based on affiliation)
Company Affiliation(s) (Biotech/Pharma companies)
Corresponding Author Email
Save to a CSV file.
ðŸ“Œ Python Script: pubmed_fetcher.py
python


import csv
import re
from Bio import Entrez, Medline

# Set your email (Required by NCBI)
Entrez.email = "your_email@example.com"

# Function to fetch PubMed articles
def fetch_pubmed_articles(query, max_results=20):
    handle = Entrez.esearch(db="pubmed", term=query, retmax=max_results)
    record = Entrez.read(handle)
    handle.close()
    return record["IdList"]

# Function to get detailed article info
def get_article_details(pubmed_ids):
    handle = Entrez.efetch(db="pubmed", id=",".join(pubmed_ids), rettype="medline", retmode="text")
    records = list(Medline.parse(handle))
    handle.close()
    return records

# Function to extract required fields
def extract_data(records):
    data = []
    
    for record in records:
        pubmed_id = record.get("PMID", "N/A")
        title = record.get("TI", "N/A")
        pub_date = record.get("DP", "N/A")
        authors = record.get("AU", [])
        affiliations = record.get("AD", [])

        # Extract non-academic authors & company affiliations
        non_academic_authors = []
        company_affiliations = []
        for author, aff in zip(authors, affiliations):
            if aff and not re.search(r"university|college|institute|school", aff, re.IGNORECASE):
                non_academic_authors.append(author)
            if aff and re.search(r"pharma|biotech|company|corporation", aff, re.IGNORECASE):
                company_affiliations.append(aff)

        # Extract corresponding author email
        email = record.get("LA", ["N/A"])[0]  # Placeholder, PubMed may not always provide email

        data.append([
            pubmed_id,
            title,
            pub_date,
            "; ".join(non_academic_authors) if non_academic_authors else "N/A",
            "; ".join(company_affiliations) if company_affiliations else "N/A",
            email
        ])

    return data

# Function to save results as CSV
def save_to_csv(data, filename="pubmed_results.csv"):
    headers = ["PubmedID", "Title", "Publication Date", "Non-academic Author(s)", "Company Affiliation(s)", "Corresponding Author Email"]
    
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(data)

# Main execution
if __name__ == "__main__":
    query = "cancer treatment"
    pubmed_ids = fetch_pubmed_articles(query)
    records = get_article_details(pubmed_ids)
    extracted_data = extract_data(records)
    save_to_csv(extracted_data)
    print(f"Results saved to pubmed_results.csv")




ðŸ“Œ How to Run the Script
Install required packages:
sh
Copy
Edit
pip install biopython
Run the script:
sh
Copy
Edit
python pubmed_fetcher.py
The results will be saved in pubmed_results.csv.
ðŸ“Œ Output Format (CSV)
PubmedID	Title	Publication Date	Non-academic Author(s)	Company Affiliation(s)	Corresponding Author Email
12345678	Sample Paper Title	2024-01-01	John Doe	ABC Pharma Inc.	john.doe@example.com
ðŸ“Œ Notes
PubMed does not always provide emails, so the script uses a placeholder (N/A).
If non-academic authors or company affiliations are missing, the column will have N/A.